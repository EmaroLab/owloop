########################################################

Notes taken during development of this (OWLOOP) project.

########################################################

This document is mainly for keeping track on how we overcome some critical/common problems when we find them.
Because as you know, when we leave the code for a week or two, and come back to it, we forget how we made it. :)

Moreover, this document can also be used to note ideas for future development, and the prerequisites that can bring them to life.

The structure for tracking the problems is as follows:

[Date - Author]
[Problem]
[Fix]

The structure for tracking the ideas is as follows:

[Date - Author]
[Idea]
[Prerequisites]

################################################################################################################

[Date - Author] 21/05/2019 - Syed Yusha Kareem
[Problem]       Axioms do not get removed, if some are added by hand in protege and others added from the code. To delete something, need to delete everything (i.e, IndividualExpressionAxioms).
[Fix]

/*
QUICK THOUGHTS:

//      Regarding the use of readExpressionAxioms()


        d1.addObject( "hasProp1", "X");
        d1.addObject( "hasProp2", "X");
        d1.writeExpressionAxioms();

        FullIndividualDesc d1 = new FullIndividualDesc("Robot1", ontoref);
        d1.readExpressionAxioms();          //at this point the descriptor reads all knowledge
        System.out.println( " 11 " + d1);

        FullIndividualDesc d2 = new FullIndividualDesc("Robot1", ontoref);
        d2.addObject( "hasProp1");
        d2.addObject( "hasProp2");
        d2.readExpressionAxioms();          //at this point the descriptor reads only particular knowledge
        System.out.println( " 22 " + d2);
*/


/*
We need ..OWLRefCreated.. to make an ontology which does not exist
We need ..OWLRefFromFile.. to interact with an ontology which already exists
From the ..OWLRefCreated.. file we can write/save in both ways (ontoref.save(), descriptor.save(path)) and CAN-READ in both ways (same descriptor, new descriptor).
From the ..OWLRefFromFile.. we can write/save in one way (descriptor.save(path)) and CAN-READ in both ways (same descriptor, new descriptor).
SynchronizeReasoner() to be in sync with the latest state of the ontology (else the descriptor reads the state of the ontology, when it was instantiated)
readExpressionAxioms(), when called for the first time, reads all (asserted and inferred) axioms because when the descriptor is initialized, syncOnto() is called.
With newOWLReferenceFromFileWithPellet(), decriptor.saveOntology(path), IS WORKING
With newOWLReferenceFromFileWithPellet(), ontoRef.saveOntology(path), IS WORKING
Its nice to (sync and save) after writing something to the ontology.
*/
